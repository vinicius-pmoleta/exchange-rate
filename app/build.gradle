apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'io.fabric'

apply from: "${rootDir}/environment/environment.gradle"
apply from: "${rootDir}/gradle/quality.gradle"

project.ext {
    support_version = '26.1.0'
    firebase_version = '11.8.0'
    dagger_version = '2.11'
    retrofit_version = '2.3.0'
    architecture_components_version = '1.1.0'
    firebase_version = '11.8.0'
    chuck_version = '1.1.0'
    leak_canary_version = '1.5.4'
    stetho_version = '1.5.0'
    rx_binding_version = '2.0.0'
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "com.exchangerate"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        release {
            storeFile file("../environment/release-keystore.jks")
            storePassword getPrivateConfig("EXCHANGE_RATE_RELEASE_SIGNING_STORE_PASSWORD")
            keyAlias getPrivateConfig("EXCHANGE_RATE_RELEASE_SIGNING_KEY_ALIAS")
            keyPassword getPrivateConfig("EXCHANGE_RATE_RELEASE_SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled = true

            buildConfigField "String", "EXCHANGE_RATE_API_KEY", getApiKey()
        }
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false
            testCoverageEnabled = true

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField 'String', 'EXCHANGE_RATE_API_KEY', getApiKey()
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet false
        abortOnError false
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }
}

kapt {
    generateStubs = true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // ANDROID
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile "com.android.support:design:$support_version"
    kapt "com.android.databinding:compiler:${gradle_version}"

    // REACTIVE
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxkotlin:2.1.0'
    compile "com.jakewharton.rxbinding2:rxbinding:$rx_binding_version"
    compile "com.jakewharton.rxbinding2:rxbinding-support-v4:$rx_binding_version"

    // KOTLIN
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // DAGGER
    compile "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // RETROFIT
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    // ARCHITECTURE COMPONENTS
    compile "android.arch.lifecycle:extensions:$architecture_components_version"
    compile "android.arch.lifecycle:reactivestreams:$architecture_components_version"
    kapt "android.arch.lifecycle:compiler:$architecture_components_version"

    // FIREBASE
    compile('com.crashlytics.sdk.android:crashlytics:2.9.0@aar') {
        transitive = true
    }
    compile "com.google.firebase:firebase-core:$firebase_version"
    compile "com.google.firebase:firebase-perf:$firebase_version"

    // TEST
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    testImplementation 'io.mockk:mockk:1.7'

    // DEVELOPMENT
    debugCompile "com.readystatesoftware.chuck:library:$chuck_version"
    releaseCompile "com.readystatesoftware.chuck:library-no-op:$chuck_version"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    compile "com.facebook.stetho:stetho:$stetho_version"
    compile "com.facebook.stetho:stetho-okhttp3:$stetho_version"

}

def getApiKey() {
    def value = ext.environment.findValueFor("EXCHANGE_RATE_APP_API_KEY")
    return "\"$value\""
}

def getPrivateConfig(String key) {
    return ext.environment.findValueFor(key)
}

apply plugin: 'com.google.gms.google-services'