apply plugin: 'jacoco'

jacoco {
    // https://bintray.com/bintray/jcenter/org.jacoco:org.jacoco.core
    toolVersion = "0.7.9"
}

android {
    testOptions {
        unitTests {
            returnDefaultValues = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def name = variant.name
        def testTaskName = "test${name.capitalize()}UnitTest"
        def filterDirectories = [
                '**/R*.class',
                '**/*BuildConfig.*',
                '**/*Activity*.*',
                '**/*Fragment*.*',
                '**/*Application.*',
                '**/*View.*',
                '**/*Adapter.*',
                '**/*Holder.*',

                '**/*$InjectAdapter.class',
                '**/*$ModuleAdapter.class',
                '**/*$ViewBinder*.class',
                '**/Dagger*.class',
                '**/*Module.class',
                '**/*Module_Provide*.class',
                '**/*_MembersInjector.class',
                '**/*AutoValue*.*',
                '**/Glide*.*',
                '**/Generated*.*',

                '**/model/*ScreenModel.*',
                '**/repository/*'
        ]

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${name.capitalize()} build."
            classDirectories = fileTree(
                    dir: "${project.buildDir}/tmp/kotlin-classes/${name}",
                    excludes: filterDirectories
            )
            sourceDirectories = files(['src/main/kotlin'].plus(android.sourceSets[name].java.srcDirs))
            executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            reports {
                xml.enabled = true
                html.enabled = true
            }
        }
    }
}